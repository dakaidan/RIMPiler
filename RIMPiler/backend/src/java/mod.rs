use std::path::Path;

fn find_kratatau2() -> Option<String> {
    let mut path = std::env::current_exe().unwrap();
    path.pop();
    path.push("krak2");
    if path.exists() {
        Some(path.to_str().unwrap().to_string())
    } else {
        println!("krak2 not found at {:?}", path);
        let path = std::env::var("PATH").unwrap();
        for p in path.split(':') {
            if p == "krak2" {
                return Some("krak2".to_string());
            }
        }

        println!("krak2 not found on system path");

        println!("Would you like to install krakatau2? (y/n/info)");
        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        if input.trim() == "info" {
            println!("krakatau2 is a java bytecode assembler and disassembler. It is used to convert the bytecode generated by the RIMPiler into a .class file that can be run on the JVM.");
            println!("You can download and build it from their github page: github.com:Storyyeller/Krakatau");
        }

        if input.trim() == "y" {
            let output = std::process::Command::new("git")
                .arg("clone")
                .arg("git@github.com:Storyyeller/Krakatau.git")
                .arg("Krakatau")
                .output()
                .expect("Unable to run git");
            println!("Cloned krakatau2");

            if !output.status.success() {
                println!("Failed to clone krakatau2");
            } else {
                let mut path = std::env::current_exe().unwrap();
                path.pop();
                path.push("Krakatau");
                std::env::set_current_dir(&path).expect("Unable to set current directory");
                let output = std::process::Command::new("cargo")
                    .arg("build")
                    .arg("--release")
                    .output()
                    .expect("Unable to run cargo");

                println!("Built krakatau2");

                if !output.status.success() {
                    println!("Failed to build krakatau2");
                } else {
                    let mut path = std::env::current_exe().unwrap();
                    path.pop();
                    path.push("Krakatau");
                    path.push("target");
                    path.push("release");
                    path.push("krak2");
                    println!("kraka2 built at {:?}", path);

                    let mut rimpiler_path = std::env::current_exe().unwrap();
                    rimpiler_path.pop();
                    rimpiler_path.push("krak2");
                    std::fs::copy(&path, &rimpiler_path).expect("Unable to copy krak2");

                    let mut path = std::env::current_exe().unwrap();
                    path.pop();
                    path.push("Krakatau");
                    std::fs::remove_dir_all(&path).expect("Unable to remove directory");

                    println!("krak2 copied to {:?}", rimpiler_path);
                    return Some(rimpiler_path.to_str().unwrap().to_string());
                }
            }
        } else {
            println!("Please install krakatau2 and add it to your system path, or place it in the same directory as the RIMPiler.");
        }

        None
    }
}

pub fn assemble_byte_code(byte_code: String, output_folder: String) {
    std::fs::create_dir_all(&output_folder).expect("Unable to create directory");
    let output_folder = Path::new(&output_folder).canonicalize().expect("Unable to canonicalize output folder path");

    if !output_folder.exists() {
        std::fs::create_dir_all(&output_folder)
            .expect("Unable to create output directory");
    }

    let mut temp_file = output_folder.to_path_buf();
    temp_file.push("Main.j");
    std::fs::write(&temp_file, &byte_code).expect("Unable to write file");

    let krak2 = find_kratatau2().expect("Unable to find krak2");

    let output_file = output_folder.join("Main.class");
    let output = std::process::Command::new(krak2)
        .arg("asm")
        .arg("--out")
        .arg(output_file)
        .arg(temp_file)
        .output()
        .expect("Unable to run krak2");

    if !output.status.success() {
        panic!("Failed to assemble bytecode {}", String::from_utf8_lossy(&output.stderr));
    }

    let rimp_int = include_bytes!("../../../../data/RIMPInt.class");
    let rimp_float = include_bytes!("../../../../data/RIMPFloat.class");

    let rimp_int_file = output_folder.join("RIMPInt.class");
    std::fs::write(&rimp_int_file, rimp_int).expect("Unable to write RIMPInt.class file");

    let rimp_float_file = output_folder.join("RIMPFloat.class");
    std::fs::write(&rimp_float_file, rimp_float).expect("Unable to write RIMPFloat.class file");
}
